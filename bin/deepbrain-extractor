#!/usr/bin/env python

import nibabel as nib
from deepbrain import Extractor
import sys
import time
import argparse
import numpy as np
import os
import glob


def load_arguments():
    parser = argparse.ArgumentParser(description="Extract brain tissue from wT1 MRI (i.e. skull stripping)")
    parser.add_argument("-i", "--input", help="Path to nifti brain image")
    parser.add_argument("-o", "--output", help="Directory where the script will output the mask and the brain nifti images")

    parser.add_argument("-ii", "--indir", help="input directory having all T1 directories")
    parser.add_argument("-oo", "--outdir", help="out directory to have all stripped directorys")
    parser.add_argument("-kw", "--keyword", default='T1_P', help="specify the keyword of T1 files. ")

    args = parser.parse_args()
    return args


def run(img_path, output_dir, p=0.5):
    img = nib.load(img_path)

    affine = img.affine
    img = img.get_fdata()

    extractor = Extractor()

    now = time.time()
    prob = extractor.run(img)
    print("Extraction time: {0:.2f} secs.".format(time.time() - now))
    mask = prob > p
    brain_mask = (1 * mask).astype(np.uint8)
    brain_mask = nib.Nifti1Image(brain_mask, affine)
    nib.save(brain_mask, os.path.join(output_dir, "brain_mask.nii.gz"))

    brain = img[:]
    brain[~mask] = 0
    brain = nib.Nifti1Image(brain, affine)
    nib.save(brain, os.path.join(output_dir, "t1.nii.gz"))

def dir_run(main_dir, output_dir, keyword, p=0.5):
    input_dirs = sorted(glob.glob(os.path.join(main_dir, '*')))

    output_dirs = [path.replace(main_dir, output_dir) for path in input_dirs]

    if 'tient' in output_dirs[0]:
        output_dirs = [path.replace('Patient', 'patient') for path in output_dirs]

    for input, output in zip(input_dirs, output_dirs):
        #print(f'extracting directory {input} to {output}')
        files = glob.glob(os.path.join(input, '*'))
        for file in files: 
            if keyword.lower() in file.lower():
                input = file
                print(f'extracting directory {input} to {output}')
                if not os.path.isdir(output):
                    os.mkdir(output)
                run(input, output)


if __name__ == "__main__":
    args = load_arguments()

    if args.indir:
        if not args.outdir:
            print("Should specify output dir, if --indir is used. See -h for instructions.")
            sys.exit(1)
        if not args.keyword:
            print("Should specify keyword dir, if --indir is used. See -h for instructions.")
            sys.exit(1)

        os.makedirs(args.outdir, exist_ok=True)
        dir_run(args.indir, args.outdir, args.keyword)
    else:
        if not args.input:
            print("Should specify input. See -h for instructions.")
            sys.exit(1)

        if not args.output:
            print("Should specify output. See -h for instructions.")
            sys.exit(1)

        if args.input:
            os.makedirs(args.output, exist_ok=True)
            run(args.input, args.output)
